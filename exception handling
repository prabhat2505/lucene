9public class InvalidFilterException extends RuntimeException {
    public InvalidFilterException(String message) {
        super(message);
    }
}




import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

@ControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(InvalidFilterException.class)
    public ResponseEntity<String> handleInvalidFilterException(InvalidFilterException ex) {
        return new ResponseEntity<>(ex.getMessage(), HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<String> handleGenericException(Exception ex) {
        return new ResponseEntity<>("An unexpected error occurred", HttpStatus.INTERNAL_SERVER_ERROR);
    }
}



import org.springframework.stereotype.Service;

@Service
public class FilterService {

    public void validateFilter(FilterDTO filterDTO) {
        boolean isHostPresent = filterDTO.getHost() != null && !filterDTO.getHost().isEmpty();
        boolean isDeviceTypePresent = filterDTO.getDeviceType() != null && !filterDTO.getDeviceType().isEmpty();
        boolean isFileTypePresent = filterDTO.getFileType() != null && !filterDTO.getFileType().isEmpty();

        if (!(isHostPresent || isDeviceTypePresent || isFileTypePresent)) {
            throw new InvalidFilterException("At least one of host, deviceType, or fileType must be provided");
        }

        if (filterDTO.getFromDate() == null || filterDTO.getToDate() == null) {
            throw new InvalidFilterException("Both fromDate and toDate are mandatory");
        }

        if (filterDTO.getFromDate().isAfter(filterDTO.getToDate())) {
            throw new InvalidFilterException("fromDate must be before or equal to toDate");
        }
    }

    public void search(FilterDTO filterDTO) {
        // Implement your search logic here
    }
}


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/filters")
public class FilterController {

    @Autowired
    private FilterService filterService;

    @PostMapping("/search")
    public ResponseEntity<String> search(@RequestBody FilterDTO filterDTO) {
        filterService.validateFilter(filterDTO);
        filterService.search(filterDTO);
        return new ResponseEntity<>("Search successful", HttpStatus.OK);
    }
}


spring.jackson.date-format=yyyy-MM-dd


import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

public class InvalidFilterExceptionTest {

    @Test
    public void testInvalidFilterExceptionMessage() {
        String errorMessage = "Invalid filter parameters";
        InvalidFilterException exception = new InvalidFilterException(errorMessage);

        assertEquals(errorMessage, exception.getMessage());
    }
}




import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;

public class FilterServiceTest {

    private FilterService filterService;

    @BeforeEach
    public void setUp() {
        filterService = new FilterService();
    }

    @Test
    public void testValidateFilterSuccess() {
        FilterDTO filterDTO = new FilterDTO();
        filterDTO.setHost("localhost");
        filterDTO.setFromDate(LocalDate.of(2024, 1, 1));
        filterDTO.setToDate(LocalDate.of(2024, 12, 31));

        assertDoesNotThrow(() -> filterService.validateFilter(filterDTO));
    }

    @Test
    public void testValidateFilterNoMandatoryFields() {
        FilterDTO filterDTO = new FilterDTO();
        filterDTO.setFromDate(LocalDate.of(2024, 1, 1));
        filterDTO.setToDate(LocalDate.of(2024, 12, 31));

        InvalidFilterException exception = assertThrows(InvalidFilterException.class, () -> filterService.validateFilter(filterDTO));
        assertEquals("At least one of host, deviceType, or fileType must be provided", exception.getMessage());
    }

    @Test
    public void testValidateFilterMissingDates() {
        FilterDTO filterDTO = new FilterDTO();
        filterDTO.setHost("localhost");

        InvalidFilterException exception = assertThrows(InvalidFilterException.class, () -> filterService.validateFilter(filterDTO));
        assertEquals("Both fromDate and toDate are mandatory", exception.getMessage());
    }

    @Test
    public void testValidateFilterInvalidDateRange() {
        FilterDTO filterDTO = new FilterDTO();
        filterDTO.setHost("localhost");
        filterDTO.setFromDate(LocalDate.of(2024, 12, 31));
        filterDTO.setToDate(LocalDate.of(2024, 1, 1));

        InvalidFilterException exception = assertThrows(InvalidFilterException.class, () -> filterService.validateFilter(filterDTO));
        assertEquals("fromDate must be before or equal to toDate", exception.getMessage());
    }
}





import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest({FilterController.class, GlobalExceptionHandler.class})
public class GlobalExceptionHandlerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private FilterService filterService;

    @Autowired
    private WebApplicationContext webApplicationContext;

    @BeforeEach
    public void setup() {
        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();
    }

    @Test
    public void testInvalidFilterExceptionHandling() throws Exception {
        doThrow(new InvalidFilterException("Invalid filter parameters")).when(filterService).validateFilter(any(FilterDTO.class));

        String requestBody = "{\"host\":\"localhost\",\"fromDate\":\"2024-01-01\",\"toDate\":\"2024-12-31\"}";

        mockMvc.perform(post("/api/filters/search")
                .contentType(MediaType.APPLICATION_JSON)
                .content(requestBody))
                .andExpect(status().isBadRequest())
                .andExpect(content().string("Invalid filter parameters"));
    }

    @Test
    public void testGenericExceptionHandling() throws Exception {
        doThrow(new RuntimeException("Generic error")).when(filterService).validateFilter(any(FilterDTO.class));

        String requestBody = "{\"host\":\"localhost\",\"fromDate\":\"2024-01-01\",\"toDate\":\"2024-12-31\"}";

        mockMvc.perform(post("/api/filters/search")
                .contentType(MediaType.APPLICATION_JSON)
                .content(requestBody))
                .andExpect(status().isInternalServerError())
                .andExpect(content().string("An unexpected error occurred"));
    }
}