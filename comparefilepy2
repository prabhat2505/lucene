import csv
import argparse

# Function to parse JTL file
def parse_jtl(file_path):
    elapsed_times = []
    success_flags = []
    
    # Open the JTL file and read it as CSV
    with open(file_path, 'r') as file:
        reader = csv.DictReader(file)
        
        # Check if required columns exist
        if not all(col in reader.fieldnames for col in ['elapsed', 'label', 'success']):
            raise ValueError("Invalid JTL file format. Required columns: 'elapsed', 'label', 'success'")
        
        # Read the rows and extract elapsed times and success flags
        for row in reader:
            elapsed_times.append(int(row['elapsed']))  # Convert elapsed to integer
            success_flags.append(1 if row['success'] == 'true' else 0)  # Convert success to 1 (True) or 0 (False)
    
    # Calculate metrics
    avg_time = sum(elapsed_times) / len(elapsed_times) if elapsed_times else 0
    min_time = min(elapsed_times) if elapsed_times else 0
    max_time = max(elapsed_times) if elapsed_times else 0
    error_rate = (1 - sum(success_flags) / len(success_flags)) * 100 if success_flags else 0
    throughput = len(elapsed_times) / (sum(elapsed_times) / 1000) if elapsed_times else 0

    return {
        "Average Response Time (ms)": round(avg_time, 2),
        "Min Response Time (ms)": min_time,
        "Max Response Time (ms)": max_time,
        "Error Rate (%)": round(error_rate, 2),
        "Throughput (requests/sec)": round(throughput, 2)
    }

# Function to compare JTL results
def compare_results(old_metrics, new_metrics):
    for metric in old_metrics.keys():
        print(f"{metric}: {old_metrics[metric]} â†’ {new_metrics[metric]}")

# Argument parser for command-line input
parser = argparse.ArgumentParser(description="Compare two JMeter JTL files")
parser.add_argument("--file1", required=True, help="Path to the first JTL file")
parser.add_argument("--file2", required=True, help="Path to the second JTL file")

args = parser.parse_args()

# Read JTL files and compare
old_metrics = parse_jtl(args.file1)
new_metrics = parse_jtl(args.file2)
compare_results(old_metrics, new_metrics)