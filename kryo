import com.esotericsoftware.kryo.Kryo;
import com.esotericsoftware.kryo.io.Input;
import com.esotericsoftware.kryo.io.Output;
import com.esotericsoftware.kryo.Serializer;

public class CollectionAuditKryoSerializer extends Serializer<CollectionAudit> {

    @Override
    public void write(Kryo kryo, Output output, CollectionAudit collectionAudit) {
        output.writeString(collectionAudit.getId());
        output.writeString(collectionAudit.getCollectorId());
        output.writeString(collectionAudit.getProcessType());
        output.writeString(collectionAudit.getJarId());
        output.writeString(collectionAudit.getJob());
        output.writeString(collectionAudit.getFlinkJobId());
        output.writeString(collectionAudit.getJobStatus());
        output.writeString(collectionAudit.getInputFilePath());
        output.writeString(collectionAudit.getOutputFilePath());
        output.writeString(collectionAudit.getDeviceType());
        output.writeString(collectionAudit.getFlinkURL());
        output.writeInt(collectionAudit.getPort());
        output.writeString(collectionAudit.getDelimiters());
        output.writeString(collectionAudit.getFileType());
        output.writeString(collectionAudit.getDateReceived());
        output.writeString(collectionAudit.getDateProcessed());
        output.writeInt(collectionAudit.getNoOfRecordsInTheFile());
        output.writeInt(collectionAudit.getNoOfRecordsProcessed());
        output.writeInt(collectionAudit.getNoOfRecordsFailed());
        output.writeString(collectionAudit.getExceptions());
        output.writeString(collectionAudit.getBootstrapServer());
    }

    @Override
    public CollectionAudit read(Kryo kryo, Input input, Class<CollectionAudit> type) {
        CollectionAudit collectionAudit = new CollectionAudit();
        collectionAudit.setId(input.readString());
        collectionAudit.setCollectorId(input.readString());
        collectionAudit.setProcessType(input.readString());
        collectionAudit.setJarId(input.readString());
        collectionAudit.setJob(input.readString());
        collectionAudit.setFlinkJobId(input.readString());
        collectionAudit.setJobStatus(input.readString());
        collectionAudit.setInputFilePath(input.readString());
        collectionAudit.setOutputFilePath(input.readString());
        collectionAudit.setDeviceType(input.readString());
        collectionAudit.setFlinkURL(input.readString());
        collectionAudit.setPort(input.readInt());
        collectionAudit.setDelimiters(input.readString());
        collectionAudit.setFileType(input.readString());
        collectionAudit.setDateReceived(input.readString());
        collectionAudit.setDateProcessed(input.readString());
        collectionAudit.setNoOfRecordsInTheFile(input.readInt());
        collectionAudit.setNoOfRecordsProcessed(input.readInt());
        collectionAudit.setNoOfRecordsFailed(input.readInt());
        collectionAudit.setExceptions(input.readString());
        collectionAudit.setBootstrapServer(input.readString());
        return collectionAudit;
    }
}



   <dependency>
        <groupId>com.esotericsoftware.kryo</groupId>
        <artifactId>kryo</artifactId>
        <version>4.0.3</version>
    </dependency>

    <!-- Kryo serializers for Scala -->
    <dependency>
        <groupId>de.javakaffee</groupId>
        <artifactId>kryo-serializers</artifactId>
        <version>0.46</version>
    </dependency>


<dependencies>
    <!-- Apache Flink Core -->
    <dependency>
        <groupId>org.apache.flink</groupId>
        <artifactId>flink-core</artifactId>
        <version>1.13.3</version>
    </dependency>

    <!-- Apache Flink Streaming with Java -->
    <dependency>
        <groupId>org.apache.flink</groupId>
        <artifactId>flink-streaming-java_2.12</artifactId>
        <version>1.13.3</version>
    </dependency>

    <!-- Apache Kafka Clients -->
    <dependency>
        <groupId>org.apache.kafka</groupId>
        <artifactId>kafka-clients</artifactId>
        <version>2.8.0</version>
        <!-- Exclude Scala artifacts -->
        <exclusions>
            <exclusion>
                <groupId>org.scala-lang</groupId>
                <artifactId>scala-library</artifactId>
            </exclusion>
            <!-- Add more exclusions if needed for other Scala artifacts -->
        </exclusions>
    </dependency>
</dependencies>

<!-- https://mvnrepository.com/artifact/de.javakaffee/kryo-serializers -->
<dependency>
    <groupId>de.javakaffee</groupId>
    <artifactId>kryo-serializers</artifactId>
    <version>0.45</version>
</dependency>

<!-- Kryo Core Library -->
<dependency>
    <groupId>com.esotericsoftware.kryo</groupId>
    <artifactId>kryo</artifactId>
    <version>5.5.0</version> <!-- Adjust version as necessary -->
</dependency>

<!-- Kryo Serializers Library -->
<dependency>
    <groupId>de.javakaffee</groupId>
    <artifactId>kryo-serializers</artifactId>
    <version>0.45</version> <!-- Adjust version as necessary -->
</dependency>







import com.esotericsoftware.kryo.Kryo;
import com.esotericsoftware.kryo.Serializer;
import com.esotericsoftware.kryo.io.Input;
import com.esotericsoftware.kryo.io.Output;
import org.json.JSONObject;

public class JSONObjectKryoSerializer extends Serializer<JSONObject> {
    @Override
    public void write(Kryo kryo, Output output, JSONObject jsonObject) {
        output.writeString(jsonObject.toString());
    }

    @Override
    public JSONObject read(Kryo kryo, Input input, Class<JSONObject> type) {
        return new JSONObject(input.readString());
    }
}



public class FlinkJob {
    public static void main(String[] args) throws Exception {
        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();

        ExecutionConfig config = env.getConfig();
        config.addDefaultKryoSerializer(JSONObject.class, JSONObjectKryoSerializer.class);
        config.addDefaultKryoSerializer(CollectionAudit.class, CollectionAuditKryoSerializer.class);

        // Ensure that Flink uses Kryo for unrecognized types:
        config.enableForceKryo();
        
        // Your Flink job logic here...

        env.execute("Flink Kryo Serializer Job");
    }
}


<build>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.8.1</version>
            <configuration>
                <source>17</source>
                <target>17</target>
                <compilerArgs>
                    <arg>--add-opens</arg>
                    <arg>java.base/java.lang=ALL-UNNAMED</arg>
                    <arg>--add-opens</arg>
                    <arg>java.base/java.util=ALL-UNNAMED</arg>
                </compilerArgs>
            </configuration>
        </plugin>
    </plugins>
</build>




<project>
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>example-project</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <java.version>17</java.version>
        <flink.version>1.18.1</flink.version>
        <kryo.version>5.6.0</kryo.version> <!-- Set your preferred Kryo version here -->
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- Define Kryo version to be used globally -->
            <dependency>
                <groupId>com.esotericsoftware</groupId>
                <artifactId>kryo</artifactId>
                <version>${kryo.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- Apache Flink Dependencies -->
        <dependency>
            <groupId>org.apache.flink</groupId>
            <artifactId>flink-clients</artifactId>
            <version>${flink.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>com.esotericsoftware.kryo</groupId>
                    <artifactId>kryo</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.flink</groupId>
            <artifactId>flink-core</artifactId>
            <version>${flink.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>com.esotericsoftware.kryo</groupId>
                    <artifactId>kryo</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.flink</groupId>
            <artifactId>flink-runtime</artifactId>
            <version>${flink.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>com.esotericsoftware.kryo</groupId>
                    <artifactId>kryo</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- Add more Flink dependencies as needed with similar exclusions -->

        <!-- Kryo and related serializers -->
        <dependency>
            <groupId>com.esotericsoftware</groupId>
            <artifactId>kryo</artifactId>
            <version>${kryo.version}</version>
        </dependency>
        <dependency>
            <groupId>de.javakaffee</groupId>
            <artifactId>kryo-serializers</artifactId>
            <version>0.45</version> <!-- Ensure compatibility with your Kryo version -->
        </dependency>

        <!-- Other dependencies -->
        <!-- Add your other dependencies here -->

    </dependencies>
</project>

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>your-artifact</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <java.version>17</java.version>
        <flink.version>1.18.1</flink.version>
        <kryo.version>5.6.0</kryo.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- Force the use of kryo version 5.6.0 -->
            <dependency>
                <groupId>com.esotericsoftware</groupId>
                <artifactId>kryo</artifactId>
                <version>${kryo.version}</version>
                <scope>compile</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- Apache Flink Dependencies with Kryo Exclusion -->
        <dependency>
            <groupId>org.apache.flink</groupId>
            <artifactId>flink-core</artifactId>
            <version>${flink.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>com.esotericsoftware</groupId>
                    <artifactId>kryo</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.flink</groupId>
            <artifactId>flink-clients</artifactId>
            <version>${flink.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>com.esotericsoftware</groupId>
                    <artifactId>kryo</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.flink</groupId>
            <artifactId>flink-runtime</artifactId>
            <version>${flink.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>com.esotericsoftware</groupId>
                    <artifactId>kryo</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Add the newer Kryo version explicitly -->
        <dependency>
            <groupId>com.esotericsoftware</groupId>
            <artifactId>kryo</artifactId>
            <version>${kryo.version}</version>
        </dependency>
        
        <!-- Add the Kryo serializers library -->
        <dependency>
            <groupId>de.javakaffee</groupId>
            <artifactId>kryo-serializers</artifactId>
            <version>0.45</version>
        </dependency>
        
        <!-- Your other dependencies -->

    </dependencies>

    <build>
        <plugins>
            <!-- Maven Enforcer Plugin to ensure dependency versions -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <id>enforce-kryo-version</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireUpperBoundDeps>
                                    <excludes>
                                        <exclude>com.esotericsoftware:kryo</exclude>
                                    </excludes>
                                </requireUpperBoundDeps>
                            </rules>
                            <fail>true</fail>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
import org.apache.flink.api.common.serialization.DeserializationSchema;
import org.apache.flink.api.common.typeinfo.TypeInformation;
import org.apache.flink.api.java.typeutils.TypeExtractor;
import org.apache.flink.streaming.connectors.kafka.KafkaDeserializationSchema;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.json.JSONObject;

import java.nio.charset.StandardCharsets;
import java.util.Map;

public class MapDeserializationSchema implements KafkaDeserializationSchema<Map<String, Object>> {

    @Override
    public boolean isEndOfStream(Map<String, Object> nextElement) {
        return false; // No end-of-stream in this example
    }

    @Override
    public Map<String, Object> deserialize(ConsumerRecord<byte[], byte[]> record) throws Exception {
        String jsonString = new String(record.value(), StandardCharsets.UTF_8);
        JSONObject jsonObject = new JSONObject(jsonString);
        return jsonObject.toMap();
    }

    @Override
    public TypeInformation<Map<String, Object>> getProducedType() {
        return TypeExtractor.getForClass(Map.class);
    }
}


