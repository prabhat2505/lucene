7import com.fasterxml.jackson.annotation.JsonFormat;

import java.time.LocalDate;

public class FilterDTO {
    private String host;
    private String deviceType;
    private String fileType;

    @JsonFormat(pattern = "yyyy-MM-dd")
    private LocalDate fromDate;

    @JsonFormat(pattern = "yyyy-MM-dd")
    private LocalDate toDate;

    // Constructors, getters, and setters
}


public class OutputDTO {
    private String devices;
    private String filesCollected;
    private String filesTransformed;
    private String recordsCollected;
    private String recordsTransformed;
    private String failedTransformations;
    private String failedCollections;

    // Constructors, getters, and setters
}


import java.util.*;

class Job {
    String id;
    String collectorId;
    String processType;
    String jarId;
    String job;
    String flinkJobId;
    String jobStatus;
    String inputFilePath;
    String outputFilePath;
    String deviceType;
    String flinkURL;
    int port;
    String delimiters;
    String fileType;
    String dateReceived;
    String dateProcessed;
    Integer noOfRecordsInTheFile;
    Integer noOfRecordsProcessed;
    Integer noOfRecordsFailed;
    String exceptions;
    String bootstrapServer;

    // Add getters and setters here or use Lombok for simplicity
}

public class JobStatistics {

    public static Map<String, Object> calculateStatistics(List<Job> jobs) {
        Set<String> devices = new HashSet<>();
        int filesCollected = 0;
        int filesTransformed = 0;
        int recordsCollected = 0;
        int recordsTransformed = 0;
        int failedTransformations = 0;
        int failedCollections = 0;

        for (Job job : jobs) {
            if (job.getJobStatus().equals("COLLECTION_SUCCESSFUL")) {
                devices.add(job.getDeviceType());
                filesCollected++;
                if (job.getNoOfRecordsInTheFile() != null) {
                    recordsCollected += job.getNoOfRecordsInTheFile();
                }
            }
            if (job.getJobStatus().equals("FLINK_JOB_SUCCESSFUL")) {
                filesTransformed++;
                if (job.getNoOfRecordsProcessed() != null) {
                    recordsTransformed += job.getNoOfRecordsProcessed();
                }
            }
            if (job.getJobStatus().equals("FLINK_JOB_FAILED")) {
                failedTransformations++;
            }
            if (job.getJobStatus().equals("COLLECTION_FAILED")) {
                failedCollections++;
            }
        }

        Map<String, Object> statistics = new HashMap<>();
        statistics.put("Devices", devices.size());
        statistics.put("Files Collected", filesCollected);
        statistics.put("Files Transformed", filesTransformed);
        statistics.put("Records Collected", recordsCollected);
        statistics.put("Records Transformed", recordsTransformed);
        statistics.put("Failed Transformations", failedTransformations);
        statistics.put("Failed Collections", failedCollections);

        return statistics;
    }

    public static void main(String[] args) {
        // Create a list of Job objects and call calculateStatistics() with it
        List<Job> jobs = new ArrayList<>();

        // Populate the jobs list with Job objects
        // jobs.add(new Job(...));

        Map<String, Object> stats = calculateStatistics(jobs);
        System.out.println(stats);
    }
}
import java.util.*;

class Job {
    String id;
    String collectorId;
    String processType;
    String jarId;
    String job;
    String flinkJobId;
    String jobStatus;
    String inputFilePath;
    String outputFilePath;
    String deviceType;
    String flinkURL;
    int port;
    String delimiters;
    String fileType;
    String dateReceived;
    String dateProcessed;
    Integer noOfRecordsInTheFile;
    Integer noOfRecordsProcessed;
    Integer noOfRecordsFailed;
    String exceptions;
    String bootstrapServer;

    // Constructor, getters, and setters can be added here
}

public class JobStatistics {

    public static Map<String, Object> calculateStatistics(List<Job> jobs) {
        Set<String> devices = new HashSet<>();
        int filesCollected = 0;
        int filesTransformed = 0;
        int recordsCollected = 0;
        int recordsTransformed = 0;
        int failedTransformations = 0;
        int failedCollections = 0;

        for (Job job : jobs) {
            if (job.getDeviceType() != null) {
                devices.add(job.getDeviceType());
            }

            switch (job.getJobStatus()) {
                case "COLLECTION_SUCCESSFUL":
                    filesCollected++;
                    if (job.getNoOfRecordsInTheFile() != null) {
                        recordsCollected += job.getNoOfRecordsInTheFile();
                    }
                    break;
                case "FLINK_JOB_SUCCESSFUL":
                    filesTransformed++;
                    if (job.getNoOfRecordsProcessed() != null) {
                        recordsTransformed += job.getNoOfRecordsProcessed();
                    }
                    break;
                case "FLINK_JOB_FAILED":
                    failedTransformations++;
                    break;
                case "COLLECTION_FAILED":
                    failedCollections++;
                    break;
                default:
                    // Handle other statuses if needed
                    break;
            }
        }

        Map<String, Object> statistics = new HashMap<>();
        statistics.put("Devices", devices.size());
        statistics.put("Files Collected", filesCollected);
        statistics.put("Files Transformed", filesTransformed);
        statistics.put("Records Collected", recordsCollected);
        statistics.put("Records Transformed", recordsTransformed);
        statistics.put("Failed Transformations", failedTransformations);
        statistics.put("Failed Collections", failedCollections);

        return statistics;
    }

    public static void main(String[] args) {
        // Example usage
        List<Job> jobs = new ArrayList<>();

        // Populate the jobs list with Job objects
        // jobs.add(new Job(...));

        Map<String, Object> stats = calculateStatistics(jobs);
        System.out.println(stats);
    }
}
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import java.util.*;

public class JobStatisticsTest {

    @Test
    public void testCalculateStatistics() {
        List<Job> jobs = new ArrayList<>();
        
        Job job1 = new Job();
        job1.setJobStatus("COLLECTION_SUCCESSFUL");
        job1.setDeviceType("Device1");
        job1.setNoOfRecordsInTheFile(50);
        jobs.add(job1);

        Job job2 = new Job();
        job2.setJobStatus("COLLECTION_SUCCESSFUL");
        job2.setDeviceType("Device2");
        job2.setNoOfRecordsInTheFile(70);
        jobs.add(job2);

        Job job3 = new Job();
        job3.setJobStatus("FLINK_JOB_SUCCESSFUL");
        job3.setNoOfRecordsProcessed(30);
        jobs.add(job3);

        Job job4 = new Job();
        job4.setJobStatus("FLINK_JOB_FAILED");
        jobs.add(job4);

        Job job5 = new Job();
        job5.setJobStatus("COLLECTION_FAILED");
        jobs.add(job5);

        Map<String, Object> stats = JobStatistics.calculateStatistics(jobs);

        assertEquals(2, stats.get("Devices"));
        assertEquals(2, stats.get("Files Collected"));
        assertEquals(1, stats.get("Files Transformed"));
        assertEquals(120, stats.get("Records Collected"));
        assertEquals(30, stats.get("Records Transformed"));
        assertEquals(1, stats.get("Failed Transformations"));
        assertEquals(1, stats.get("Failed Collections"));
    }

    @Test
    public void testCalculateStatisticsWithNoJobs() {
        List<Job> jobs = new ArrayList<>();
        
        Map<String, Object> stats = JobStatistics.calculateStatistics(jobs);

        assertEquals(0, stats.get("Devices"));
        assertEquals(0, stats.get("Files Collected"));
        assertEquals(0, stats.get("Files Transformed"));
        assertEquals(0, stats.get("Records Collected"));
        assertEquals(0, stats.get("Records Transformed"));
        assertEquals(0, stats.get("Failed Transformations"));
        assertEquals(0, stats.get("Failed Collections"));
    }

    @Test
    public void testCalculateStatisticsWithNullValues() {
        List<Job> jobs = new ArrayList<>();

        Job job = new Job();
        job.setJobStatus("COLLECTION_SUCCESSFUL");
        job.setDeviceType(null);
        job.setNoOfRecordsInTheFile(null);
        jobs.add(job);

        Map<String, Object> stats = JobStatistics.calculateStatistics(jobs);

        assertEquals(0, stats.get("Devices"));
        assertEquals(1, stats.get("Files Collected"));
        assertEquals(0, stats.get("Files Transformed"));
        assertEquals(0, stats.get("Records Collected"));
        assertEquals(0, stats.get("Records Transformed"));
        assertEquals(0, stats.get("Failed Transformations"));
        assertEquals(0, stats.get("Failed Collections"));
    }
}