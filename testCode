import org.yaml.snakeyaml.Yaml;
import java.io.InputStream;
import java.util.Map;

public class S3Util {
    private final String accessKeyId;
    private final String secretAccessKey;
    private final String region;

    public S3Util() {
        // Load the YAML file from the resources directory
        InputStream inputStream = S3Util.class.getResourceAsStream("/application.yaml");
        
        // Parse the YAML file
        Yaml yaml = new Yaml();
        Map<String, Object> yamlData = yaml.load(inputStream);
        
        // Extract AWS credentials and other settings from the YAML data
        Map<String, Object> awsConfig = (Map<String, Object>) yamlData.get("aws");
        this.accessKeyId = (String) awsConfig.get("accessKeyId");
        this.secretAccessKey = (String) awsConfig.get("secretAccessKey");
        this.region = (String) awsConfig.get("region");
    }

    // Getter methods for accessKeyId, secretAccessKey, and region

    public String getAccessKeyId() {
        return accessKeyId;
    }

    public String getSecretAccessKey() {
        return secretAccessKey;
    }

    public String getRegion() {
        return region;
    }

    // Add methods to work with S3 using the configured credentials and region
}



import org.yaml.snakeyaml.Yaml;
import java.io.InputStream;
import java.util.Map;

public class S3Util {
    private final String accessKey;
    private final String secretKey;
    private final String bucketName;

    public S3Util() {
        // Load the YAML file from the resources directory
        InputStream inputStream = S3Util.class.getResourceAsStream("/application.yaml");

        // Parse the YAML file
        Yaml yaml = new Yaml();
        Map<String, Object> yamlData = yaml.load(inputStream);

        // Extract AWS credentials and bucket name directly from the YAML data
        this.accessKey = (String) yamlData.get("accesskey");
        this.secretKey = (String) yamlData.get("scretkey");
        this.bucketName = (String) yamlData.get("bucketname");
    }

    // Getter methods for accessKey, secretKey, and bucketName

    public String getAccessKey() {
        return accessKey;
    }

    public String getSecretKey() {
        return secretKey;
    }

    public String getBucketName() {
        return bucketName;
    }

    // Add methods to work with S3 using the configured credentials and bucket name
}


import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import org.junit.Test;

import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.GetObjectRequest;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectInputStream;

public class S3UtilTest {

    @Test
    public void testGetFileContent() throws IOException {
        // Mock AmazonS3 client
        AmazonS3 s3Client = mock(AmazonS3.class);
        
        // Mock S3Object
        S3Object s3Object = mock(S3Object.class);
        when(s3Client.getObject("yourBucketName", "yourFileName")).thenReturn(s3Object);
        
        // Mock S3ObjectInputStream
        String content = "This is the file content";
        InputStream inputStream = new ByteArrayInputStream(content.getBytes());
        S3ObjectInputStream objectContent = new S3ObjectInputStream(inputStream, null);
        when(s3Object.getObjectContent()).thenReturn(objectContent);
        
        // Instantiate S3Util
        S3Util s3Util = new S3Util();
        s3Util.setS3Client(s3Client);
        
        // Invoke getFileContent method
        String actualContent = s3Util.getFileContent("yourFileName", "yourBucketName");
        
        // Assert the content
        assertEquals(content, actualContent);
    }
}






import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

import org.junit.Test;

import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectInputStream;

public class S3UtilTest {

    @Test
    public void testGetFileContent() throws IOException {
        // Mock AmazonS3 client
        AmazonS3 s3Client = mock(AmazonS3.class);
        
        // Mock S3Object
        S3Object s3Object = mock(S3Object.class);
        
        // Mock S3ObjectInputStream
        String content = "This is the file content";
        InputStream inputStream = new ByteArrayInputStream(content.getBytes());
        S3ObjectInputStream objectContent = new S3ObjectInputStream(inputStream, null);
        when(s3Object.getObjectContent()).thenReturn(objectContent);
        
        // Configure s3Client.getObject to return the mock S3Object
        when(s3Client.getObject(any())).thenReturn(s3Object);
        
        // Instantiate S3Util
        S3Util s3Util = new S3Util();
        
        // Invoke getFileContent method
        String actualContent = s3Util.getFileContent("exampleFile.txt", s3Client);
        
        // Assert the content
        assertEquals(content, actualContent);
    }
}

class S3Util {

    public String getFileContent(String filename, AmazonS3 s3Client) throws IOException {
        S3Object s3Object = s3Client.getObject("yourBucketName", filename);
        S3ObjectInputStream objectContent = s3Object.getObjectContent();
        StringBuilder content = new StringBuilder();

        try (InputStreamReader streamReader = new InputStreamReader(objectContent);
             BufferedReader reader = new BufferedReader(streamReader)) {
            String line;
            while ((line = reader.readLine()) != null) {
                content.append(line);
            }
        }

        return content.toString();
    }
}




import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

import org.junit.Test;

import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectInputStream;

public class S3UtilTest {

    @Test
    public void testGetFileContent() throws IOException {
        // Mock AmazonS3 client
        AmazonS3 s3Client = mock(AmazonS3.class);
        
        // Mock S3Object
        S3Object s3Object = mock(S3Object.class);
        
        // Mock S3ObjectInputStream
        String content = "This is the file content";
        InputStream inputStream = new ByteArrayInputStream(content.getBytes());
        S3ObjectInputStream objectContent = new S3ObjectInputStream(inputStream, null);
        
        // Configure s3Object to return mock S3ObjectInputStream
        when(s3Object.getObjectContent()).thenReturn(objectContent);
        
        // Configure s3Client.getObject to return the mock S3Object
        when(s3Client.getObject(anyString(), anyString())).thenReturn(s3Object);
        
        // Instantiate S3Util
        S3Util s3Util = new S3Util();
        
        // Invoke getFileContent method
        String actualContent = s3Util.getFileContent("exampleFile.txt", s3Client);
        
        // Assert the content
        assertEquals(content, actualContent);
    }
}






Feature: Read File from S3 Bucket

  Scenario: Read a file from an S3 bucket
    Given I have access to an S3 bucket
    And there is a file named "example.txt" in the bucket
    When I read the file from the bucket
    Then I should be able to view its content




import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.GetObjectRequest;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectInputStream;

import io.cucumber.java.en.*;

public class ReadS3FileStepDefinitions {

    private AmazonS3 s3Client;
    private String fileName;
    private String fileContent;

    @Given("I have access to an S3 bucket")
    public void iHaveAccessToAnS3Bucket() {
        // Mock AmazonS3 client
        s3Client = mock(AmazonS3.class);
    }

    @And("there is a file named {string} in the bucket")
    public void thereIsAFileNamedInTheBucket(String fileName) {
        this.fileName = fileName;
    }

    @When("I read the file from the bucket")
    public void iReadTheFileFromTheBucket() throws IOException {
        // Mock S3Object
        S3Object s3Object = mock(S3Object.class);
        
        // Mock S3ObjectInputStream
        String content = "This is the file content";
        InputStream inputStream = new ByteArrayInputStream(content.getBytes());
        S3ObjectInputStream objectContent = new S3ObjectInputStream(inputStream, null);
        
        // Configure s3Object to return mock S3ObjectInputStream
        when(s3Object.getObjectContent()).thenReturn(objectContent);
        
        // Configure s3Client.getObject to return the mock S3Object
        when(s3Client.getObject(any())).thenReturn(s3Object);
        
        // Invoke getFileContent method
        fileContent = readS3File(fileName, s3Client);
    }

    @Then("I should be able to view its content")
    public void iShouldBeAbleToViewItsContent() {
        // Assert the content
        assertEquals("This is the file content", fileContent);
    }

    private String readS3File(String fileName, AmazonS3 s3Client) throws IOException {
        S3Object s3Object = s3Client.getObject("yourBucketName", fileName);
        S3ObjectInputStream objectContent = s3Object.getObjectContent();
        StringBuilder content = new StringBuilder();

        try (InputStreamReader streamReader = new InputStreamReader(objectContent);
             BufferedReader reader = new BufferedReader(streamReader)) {
            String line;
            while ((line = reader.readLine()) != null) {
                content.append(line);
            }
        }

        return content.toString();
    }
}






# .gitlab-ci.yml

stages:
  - build

variables:
  DOCKER_HOST: tcp://docker:2375/  # Set the Docker daemon address

build_image:
  stage: build
  image: docker:stable
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --build-arg ENVIRONMENT=uat -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA



# .gitlab-ci.yml

stages:
  - build

variables:
  DOCKER_HOST: tcp://docker:2375/  # Set the Docker daemon address
  ENVIRONMENT: "uat"  # Define the environment variable here

build_image:
  stage: build
  image: docker:stable
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --build-arg ENVIRONMENT=$ENVIRONMENT -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA















import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;

public class JsonMapper {

    private ObjectMapper objectMapper = new ObjectMapper();

    public String map(JsonNode originalJson) throws Exception {
        // Create ObjectNodes to store fields and data
        ObjectNode fieldsMap = objectMapper.createObjectNode();
        ObjectNode data = objectMapper.createObjectNode();

        // Iterate over the field names (keys)
        Iterator<String> fieldNames = originalJson.fieldNames();

        while (fieldNames.hasNext()) {
            String fieldName = fieldNames.next();
            JsonNode fieldValue = originalJson.get(fieldName);

            String type;

            if (fieldValue.isObject()) { // If the field is another JSON object
                type = "object";
                data.set(fieldName, fieldValue); // Store the object field
            } else if (fieldValue.isTextual()) { // If the field is a text (string)
                type = "string";
                data.put(fieldName, fieldValue.asText());
            } else if (fieldValue.isInt()) { // If the field is an integer
                type = "integer";
                data.put(fieldName, fieldValue.asInt());
            } else if (fieldValue.isBoolean()) { // If the field is a boolean
                type = "boolean";
                data.put(fieldName, fieldValue.asBoolean());
            } else {
                type = "unknown";
            }

            // Store the type in fieldsMap
            fieldsMap.put(fieldName, type);
        }

        // Create an encapsulating ObjectNode to hold fields and data
        ObjectNode encapsulatedJson = objectMapper.createObjectNode();
        encapsulatedJson.set("fieldsMap", fieldsMap);
        encapsulatedJson.set("data", data);

        // Convert the ObjectNode to a JSON string
        return encapsulatedJson.toString();
    }
}








import org.json.JSONObject;
import org.json.JSONArray;
import java.util.Iterator;

public class JsonComparator {
    
    // Compares two JSONObjects recursively, ignoring the order of keys
    public static boolean areJsonObjectsEqual(JSONObject json1, JSONObject json2) {
        if (json1.length() != json2.length()) {
            return false; // Different number of keys
        }

        for (String key : json1.keySet()) {
            if (!json2.has(key)) {
                return false; // json2 doesn't have this key
            }

            Object value1 = json1.get(key);
            Object value2 = json2.get(key);

            if (value1 instanceof JSONObject && value2 instanceof JSONObject) {
                // Recursive comparison for nested JSONObjects
                if (!areJsonObjectsEqual((JSONObject) value1, (JSONObject) value2)) {
                    return false;
                }
            } else if (value1 instanceof JSONArray && value2 instanceof JSONArray) {
                // Recursive comparison for JSONArrays
                if (!areJsonArraysEqual((JSONArray) value1, (JSONArray) value2)) {
                    return false;
                }
            } else if (!value1.equals(value2)) {
                return false; // Different values for the same key
            }
        }

        return true;
    }

    // Compares two JSONArrays recursively, considering the order of elements
    public static boolean areJsonArraysEqual(JSONArray array1, JSONArray array2) {
        if (array1.length() != array2.length()) {
            return false;
        }

        for (int i = 0; i < array1.length(); i++) {
            Object item1 = array1.get(i);
            Object item2 = array2.get(i);

            if (item1 instanceof JSONObject && item2 instanceof JSONObject) {
                if (!areJsonObjectsEqual((JSONObject) item1, (JSONObject) item2)) {
                    return false;
                }
            } else if (!item1.equals(item2)) {
                return false;
            }
        }

        return true;
    }
}


import org.json.JSONObject;
import org.json.JSONArray;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class JsonComparator {

    // Converts an Iterator to a Set of strings
    public static Set<String> iteratorToSet(Iterator<String> iterator) {
        Set<String> set = new HashSet<>();
        while (iterator.hasNext()) {
            set.add(iterator.next());
        }
        return set;
    }

    // Compares two JSONObjects recursively, ignoring the order of keys
    public static boolean areJsonObjectsEqual(JSONObject json1, JSONObject json2) {
        if (json1.length() != json2.length()) {
            return false; // Different number of keys
        }

        // Convert keys() to a set for reliable comparison
        Set<String> keys1 = iteratorToSet(json1.keys());
        Set<String> keys2 = iteratorToSet(json2.keys());

        if (!keys1.equals(keys2)) {
            return false; // The key sets are not the same
        }

        for (String key : keys1) {
            Object value1 = json1.get(key);
            Object value2 = json2.get(key);

            if (value1 instanceof JSONObject && value2 instanceof JSONObject) {
                if (!areJsonObjectsEqual((JSONObject) value1, (JSONObject) value2)) {
                    return false; // Nested object comparison
            } else if (value1 instanceof JSONArray && value2 instanceof JSONArray) {
                if (!areJsonArraysEqual((JSONArray) value1, (JSONArray) value2)) {
                    return false; // Nested array comparison
            } else if (!value1.equals(value2)) {
                return false; // Different value for the same key
            }
        }

        return true; // All keys and values match
    }

    // Compares two JSONArrays recursively, considering the order of elements
    public static boolean areJsonArraysEqual(JSONArray array1, JSONArray array2) {
        if (array1.length() != array2.length()) {
            return false; // Different number of elements
        }

        for (int i = 0; i < array1.length(); i++) {
            Object item1 = array1







    public static Set<String> iteratorToSet(Iterator<String> iterator) {
        Set<String> set = new HashSet<>();
        while (iterator.hasNext()) {
            set.add(iterator.next());
        }
        return set;
    }

