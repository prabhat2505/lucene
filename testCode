import org.yaml.snakeyaml.Yaml;
import java.io.InputStream;
import java.util.Map;

public class S3Util {
    private final String accessKeyId;
    private final String secretAccessKey;
    private final String region;

    public S3Util() {
        // Load the YAML file from the resources directory
        InputStream inputStream = S3Util.class.getResourceAsStream("/application.yaml");
        
        // Parse the YAML file
        Yaml yaml = new Yaml();
        Map<String, Object> yamlData = yaml.load(inputStream);
        
        // Extract AWS credentials and other settings from the YAML data
        Map<String, Object> awsConfig = (Map<String, Object>) yamlData.get("aws");
        this.accessKeyId = (String) awsConfig.get("accessKeyId");
        this.secretAccessKey = (String) awsConfig.get("secretAccessKey");
        this.region = (String) awsConfig.get("region");
    }

    // Getter methods for accessKeyId, secretAccessKey, and region

    public String getAccessKeyId() {
        return accessKeyId;
    }

    public String getSecretAccessKey() {
        return secretAccessKey;
    }

    public String getRegion() {
        return region;
    }

    // Add methods to work with S3 using the configured credentials and region
}



import org.yaml.snakeyaml.Yaml;
import java.io.InputStream;
import java.util.Map;

public class S3Util {
    private final String accessKey;
    private final String secretKey;
    private final String bucketName;

    public S3Util() {
        // Load the YAML file from the resources directory
        InputStream inputStream = S3Util.class.getResourceAsStream("/application.yaml");

        // Parse the YAML file
        Yaml yaml = new Yaml();
        Map<String, Object> yamlData = yaml.load(inputStream);

        // Extract AWS credentials and bucket name directly from the YAML data
        this.accessKey = (String) yamlData.get("accesskey");
        this.secretKey = (String) yamlData.get("scretkey");
        this.bucketName = (String) yamlData.get("bucketname");
    }

    // Getter methods for accessKey, secretKey, and bucketName

    public String getAccessKey() {
        return accessKey;
    }

    public String getSecretKey() {
        return secretKey;
    }

    public String getBucketName() {
        return bucketName;
    }

    // Add methods to work with S3 using the configured credentials and bucket name
}


import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import org.junit.Test;

import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.GetObjectRequest;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectInputStream;

public class S3UtilTest {

    @Test
    public void testGetFileContent() throws IOException {
        // Mock AmazonS3 client
        AmazonS3 s3Client = mock(AmazonS3.class);
        
        // Mock S3Object
        S3Object s3Object = mock(S3Object.class);
        when(s3Client.getObject("yourBucketName", "yourFileName")).thenReturn(s3Object);
        
        // Mock S3ObjectInputStream
        String content = "This is the file content";
        InputStream inputStream = new ByteArrayInputStream(content.getBytes());
        S3ObjectInputStream objectContent = new S3ObjectInputStream(inputStream, null);
        when(s3Object.getObjectContent()).thenReturn(objectContent);
        
        // Instantiate S3Util
        S3Util s3Util = new S3Util();
        s3Util.setS3Client(s3Client);
        
        // Invoke getFileContent method
        String actualContent = s3Util.getFileContent("yourFileName", "yourBucketName");
        
        // Assert the content
        assertEquals(content, actualContent);
    }
}






import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

import org.junit.Test;

import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectInputStream;

public class S3UtilTest {

    @Test
    public void testGetFileContent() throws IOException {
        // Mock AmazonS3 client
        AmazonS3 s3Client = mock(AmazonS3.class);
        
        // Mock S3Object
        S3Object s3Object = mock(S3Object.class);
        
        // Mock S3ObjectInputStream
        String content = "This is the file content";
        InputStream inputStream = new ByteArrayInputStream(content.getBytes());
        S3ObjectInputStream objectContent = new S3ObjectInputStream(inputStream, null);
        when(s3Object.getObjectContent()).thenReturn(objectContent);
        
        // Configure s3Client.getObject to return the mock S3Object
        when(s3Client.getObject(any())).thenReturn(s3Object);
        
        // Instantiate S3Util
        S3Util s3Util = new S3Util();
        
        // Invoke getFileContent method
        String actualContent = s3Util.getFileContent("exampleFile.txt", s3Client);
        
        // Assert the content
        assertEquals(content, actualContent);
    }
}

class S3Util {

    public String getFileContent(String filename, AmazonS3 s3Client) throws IOException {
        S3Object s3Object = s3Client.getObject("yourBucketName", filename);
        S3ObjectInputStream objectContent = s3Object.getObjectContent();
        StringBuilder content = new StringBuilder();

        try (InputStreamReader streamReader = new InputStreamReader(objectContent);
             BufferedReader reader = new BufferedReader(streamReader)) {
            String line;
            while ((line = reader.readLine()) != null) {
                content.append(line);
            }
        }

        return content.toString();
    }
}




import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

import org.junit.Test;

import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectInputStream;

public class S3UtilTest {

    @Test
    public void testGetFileContent() throws IOException {
        // Mock AmazonS3 client
        AmazonS3 s3Client = mock(AmazonS3.class);
        
        // Mock S3Object
        S3Object s3Object = mock(S3Object.class);
        
        // Mock S3ObjectInputStream
        String content = "This is the file content";
        InputStream inputStream = new ByteArrayInputStream(content.getBytes());
        S3ObjectInputStream objectContent = new S3ObjectInputStream(inputStream, null);
        
        // Configure s3Object to return mock S3ObjectInputStream
        when(s3Object.getObjectContent()).thenReturn(objectContent);
        
        // Configure s3Client.getObject to return the mock S3Object
        when(s3Client.getObject(anyString(), anyString())).thenReturn(s3Object);
        
        // Instantiate S3Util
        S3Util s3Util = new S3Util();
        
        // Invoke getFileContent method
        String actualContent = s3Util.getFileContent("exampleFile.txt", s3Client);
        
        // Assert the content
        assertEquals(content, actualContent);
    }
}


