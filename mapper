import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.json.JSONObject;
import java.util.Iterator;

public class JsonMapper {

    private final ObjectMapper objectMapper;

    public JsonMapper() {
        this.objectMapper = new ObjectMapper();
    }

    @Override
    public String map(JSONObject originalJson) throws Exception {
        ObjectNode fieldsMap = objectMapper.createObjectNode();
        ObjectNode data = objectMapper.createObjectNode();

        Iterator<String> keys = originalJson.keys();
        while (keys.hasNext()) {
            String key = keys.next();
            Object value = originalJson.get(key);

            // Handle JSONObject by converting it to ObjectNode
            if (value instanceof JSONObject) {
                fieldsMap.put(key, "object");
                ObjectNode nestedData = objectMapper.createObjectNode();
                JSONObject jsonObjectValue = (JSONObject) value;

                // Populate nested ObjectNode
                Iterator<String> nestedKeys = jsonObjectValue.keys();
                while (nestedKeys.hasNext()) {
                    String nestedKey = nestedKeys.next();
                    Object nestedValue = jsonObjectValue.get(nestedKey);

                    if (nestedValue instanceof String) {
                        nestedData.put(nestedKey, (String) nestedValue);
                    }
                }

                data.set(key, nestedData);  // Set converted ObjectNode
            } else {
                // Handle simple data types
                fieldsMap.put(key, "string");
                data.put(key, value.toString());
            }
        }

        ObjectNode encapsulatedJson = objectMapper.createObjectNode();
        encapsulatedJson.set("fieldsMap", fieldsMap);
        encapsulatedJson.set("data", data);

        return encapsulatedJson.toString();
    }
}




        String mappedJsonString = jsonMapper.map(originalJson);
        ObjectNode mappedJson = (ObjectNode) objectMapper.readTree(mappedJsonString);

        // Assert fieldsMap has the correct type mapping
        ObjectNode fieldsMap = (ObjectNode) mappedJson.get("fieldsMap");
        assertEquals("string", fieldsMap.get("name").asText());
        assertEquals("string", fieldsMap.get("age").asText());
        assertEquals("object", fieldsMap.get("address").asText());

        // Assert data contains the expected nested values
        ObjectNode data = (ObjectNode) mappedJson.get("data");
        ObjectNode addressData = (ObjectNode) data.get("address");
        assertEquals("New York", addressData.get("city").asText());
        assertEquals("10001", addressData.get("zip").asText());











import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.json.JSONArray;
import org.json.JSONObject;
import java.util.Iterator;

public class JsonMapper {

    private final ObjectMapper objectMapper;

    public JsonMapper() {
        this.objectMapper = new ObjectMapper();
    }

    @Override
    public String map(JSONObject originalJson) throws Exception {
        ObjectNode fieldsMap = objectMapper.createObjectNode();
        ObjectNode data = objectMapper.createObjectNode();

        Iterator<String> keys = originalJson.keys();
        while (keys.hasNext()) {
            String key = keys.next();
            Object value = originalJson.get(key);

            // Determine the field type
            String fieldType;
            if (value instanceof JSONObject) {
                fieldType = "object";
                ObjectNode nestedData = objectMapper.createObjectNode();
                JSONObject jsonObject = (JSONObject) value;

                Iterator<String> nestedKeys = jsonObject.keys();
                while (nestedKeys.hasNext()) {
                    String nestedKey = nestedKeys.next();
                    nestedData.putPOJO(nestedKey, jsonObject.get(nestedKey));
                }

                fieldsMap.put(key, fieldType);
                data.set(key, nestedData);

            } else if (value instanceof JSONArray) {
                fieldType = "array";

                JSONArray jsonArray = (JSONArray) value;
                if (jsonArray.length() > 0 && jsonArray.get(0) instanceof JSONObject) {
                    // Array of objects
                    ObjectNode arrayData = objectMapper.createObjectNode();
                    for (int i = 0; i < jsonArray.length(); i++) {
                        ObjectNode objectInArray = objectMapper.createObjectNode();
                        JSONObject jsonObject = jsonArray.getJSONObject(i);

                        Iterator<String> nestedKeys = jsonObject.keys();
                        while (nestedKeys.hasNext()) {
                            String nestedKey = nestedKeys.next();
                            objectInArray.putPOJO(nestedKey, jsonObject.get(nestedKey));
                        }

                        arrayData.set(String.valueOf(i), objectInArray);
                    }

                    data.set(key, arrayData);
                } else {
                    // Array of other types (e.g., strings)
                    for (int i = 0; i < jsonArray.length(); i++) {
                        data.put(key + "[" + i + "]", jsonArray.get(i).toString());
                    }
                }

                fieldsMap.put(key, fieldType);
            } else {
                fieldType = "string";
                fieldsMap.put(key, fieldType);
                data.put(key, value.toString());
            }
        }

        ObjectNode encapsulatedJson = objectMapper.createObjectNode();
        encapsulatedJson.set("fieldsMap", fieldsMap);
        encapsulatedJson.set("data", data);

        return encapsulatedJson.toString();
    }
}
















import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.json.JSONArray;
import org.json.JSONObject;
import java.util.Iterator;

public class JsonMapper {

    private final ObjectMapper objectMapper;

    public JsonMapper() {
        this.objectMapper = new ObjectMapper();
    }

    @Override
    public String map(JSONObject originalJson) throws Exception {
        ObjectNode fieldsMap = objectMapper.createObjectNode();
        ObjectNode data = objectMapper.createObjectNode();

        Iterator<String> keys = originalJson.keys();
        while (keys.hasNext()) {
            String key = keys.next();
            Object value = originalJson.get(key);

            // Determine the type for fieldsMap
            if (value instanceof JSONObject) {
                fieldsMap.put(key, "object");
                ObjectNode nestedData = processJsonObject((JSONObject) value);
                data.set(key, nestedData);
            } else if (value instanceof JSONArray) {
                fieldsMap.put(key, "array");

                JSONArray jsonArray = (JSONArray) value;
                if (jsonArray.length() > 0 && jsonArray.get(0) instanceof JSONObject) {
                    // Handle arrays of objects
                    ObjectNode arrayData = objectMapper.createObjectNode();
                    for (int i = 0; i < jsonArray.length(); i++) {
                        ObjectNode objectInArray = processJsonObject(jsonArray.getJSONObject(i));
                        arrayData.set(String.valueOf(i), objectInArray);
                    }

                    data.set(key, arrayData);
                } else {
                    // Handle arrays of simple types like strings or numbers
                    for (int i = 0; i < jsonArray.length(); i++) {
                        data.put(key + "[" + i + "]", jsonArray.get(i).toString());
                    }
                }
            } else {
                fieldsMap.put(key, "string");
                data.put(key, value.toString());
            }
        }

        ObjectNode encapsulatedJson = objectMapper.createObjectNode();
        encapsulatedJson.set("fieldsMap", fieldsMap);
        encapsulatedJson.set("data", data);

        return encapsulatedJson.toString();
    }

    private ObjectNode processJsonObject(JSONObject jsonObject) throws Exception {
        ObjectNode objectNode = objectMapper.createObjectNode();

        Iterator<String> keys = jsonObject.keys();
        while (keys.hasNext()) {
            String key = keys.next();
            Object value = jsonObject.get(key);

            if (value instanceof JSONObject) {
                objectNode.set(key, processJsonObject((JSONObject) value));
            } else if (value instanceof JSONArray) {
                JSONArray jsonArray = (JSONArray) value;
                if (jsonArray.length() > 0 && jsonArray.get(0) instanceof JSONObject) {
                    ObjectNode arrayData = objectMapper.createObjectNode();
                    for (int i = 0; i < jsonArray.length(); i++) {
                        arrayData.set(String.valueOf(i), processJsonObject(jsonArray.getJSONObject(i)));
                    }
                    objectNode.set(key, arrayData);
                } else {
                    for (int i = 0; i < jsonArray.length(); i++) {
                        objectNode.put(key + "[" + i + "]", jsonArray.get(i).toString());
                    }
                }
            } else {
                objectNode.put(key, value.toString());
            }
        }





import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.json.JSONArray;
import org.json.JSONObject;
import java.util.Iterator;

public class JsonMapper {

    private final ObjectMapper objectMapper;

    public JsonMapper() {
        this.objectMapper = new ObjectMapper();
    }

    @Override
    public String map(JSONObject originalJson) throws Exception {
        ObjectNode fieldsMap = objectMapper.createObjectNode();
        ObjectNode data = objectMapper.createObjectNode();

        Iterator<String> keys = originalJson.keys();
        while (keys.hasNext()) {
            String key = keys.next();
            Object value = originalJson.get(key);

            if (value instanceof JSONObject) {
                fieldsMap.put(key, "object");
                data.set(key, processJsonObject((JSONObject) value));
            } else if (value instanceof JSONArray) {
                fieldsMap.put(key, "array");
                data.set(key, processJsonArray((JSONArray) value));
            } else {
                fieldsMap.put(key, "string");
                data.put(key, value.toString());
            }
        }

        ObjectNode encapsulatedJson = objectMapper.createObjectNode();
        encapsulatedJson.set("fieldsMap", fieldsMap);
        encapsulatedJson.set("data", data);

        return encapsulatedJson.toString();
    }

    private ObjectNode processJsonObject(JSONObject jsonObject) throws Exception {
        ObjectNode objectNode = objectMapper.createObjectNode();

        Iterator<String> keys = jsonObject.keys();
        while (keys.hasNext()) {
            String key = keys.next();
            Object value = jsonObject.get(key);

            if (value instanceof JSONObject) {
                objectNode.set(key, processJsonObject((JSONObject) value));
            } else if (value instanceof JSONArray) {
                objectNode.set(key, processJsonArray((JSONArray) value));
            } else {
                objectNode.put(key, value.toString());
            }
        }

        return objectNode;
    }

    private ObjectNode processJsonArray(JSONArray jsonArray) throws Exception {
        ObjectNode arrayNode = objectMapper.createObjectNode();

        for (int i = 0; i < jsonArray.length(); i++) {
            Object value = jsonArray.get(i);
            if (value instanceof JSONObject) {
                arrayNode.set(String.valueOf(i), processJsonObject((JSONObject) value));
            } else if (value instanceof String) {
                arrayNode.put(String.valueOf(i), (String) value);
            } else {
                arrayNode.put(String.valueOf(i), value.toString());
            }
        }

        return arrayNode;
    }
}


        return objectNode;
    }
}

