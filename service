import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

public class FilterServiceTest {

    private FilterService filterService;

    @BeforeEach
    public void setUp() {
        filterService = new FilterService();
    }

    @Test
    public void testIsRecordExistAllCriteriaMatch() {
        CollectionAuditFilterDTO filterDTO = new CollectionAuditFilterDTO();
        filterDTO.setHost("localhost");
        filterDTO.setDeviceType("Router");
        filterDTO.setFileType("Log");
        filterDTO.setFromDate(LocalDate.of(2024, 1, 1));
        filterDTO.setToDate(LocalDate.of(2024, 12, 31));

        CollectionAudit collectionAudit = new CollectionAudit();
        collectionAudit.setUrl("localhost");
        collectionAudit.setDeviceType("Router");
        collectionAudit.setFileType("LogFile");
        collectionAudit.setDateProcessed(LocalDateTime.of(2024, 6, 1, 12, 0));
        collectionAudit.setCollectorId("123");

        Set<String> idSets = new HashSet<>();
        idSets.add("124");

        boolean result = filterService.isRecordExist(filterDTO, collectionAudit, idSets);
        assertTrue(result);
    }

    @Test
    public void testIsRecordExistDateOutOfRange() {
        CollectionAuditFilterDTO filterDTO = new CollectionAuditFilterDTO();
        filterDTO.setHost("localhost");
        filterDTO.setDeviceType("Router");
        filterDTO.setFileType("Log");
        filterDTO.setFromDate(LocalDate.of(2024, 1, 1));
        filterDTO.setToDate(LocalDate.of(2024, 12, 31));

        CollectionAudit collectionAudit = new CollectionAudit();
        collectionAudit.setUrl("localhost");
        collectionAudit.setDeviceType("Router");
        collectionAudit.setFileType("LogFile");
        collectionAudit.setDateProcessed(LocalDateTime.of(2025, 1, 1, 12, 0));
        collectionAudit.setCollectorId("123");

        Set<String> idSets = new HashSet<>();
        idSets.add("124");

        boolean result = filterService.isRecordExist(filterDTO, collectionAudit, idSets);
        assertFalse(result);
    }

    @Test
    public void testIsRecordExistFileTypeMismatch() {
        CollectionAuditFilterDTO filterDTO = new CollectionAuditFilterDTO();
        filterDTO.setHost("localhost");
        filterDTO.setDeviceType("Router");
        filterDTO.setFileType("Log");
        filterDTO.setFromDate(LocalDate.of(2024, 1, 1));
        filterDTO.setToDate(LocalDate.of(2024, 12, 31));

        CollectionAudit collectionAudit = new CollectionAudit();
        collectionAudit.setUrl("localhost");
        collectionAudit.setDeviceType("Router");
        collectionAudit.setFileType("ErrorFile");
        collectionAudit.setDateProcessed(LocalDateTime.of(2024, 6, 1, 12, 0));
        collectionAudit.setCollectorId("123");

        Set<String> idSets = new HashSet<>();
        idSets.add("124");

        boolean result = filterService.isRecordExist(filterDTO, collectionAudit, idSets);
        assertFalse(result);
    }

    @Test
    public void testIsRecordExistDeviceTypeMatchInIdSet() {
        CollectionAuditFilterDTO filterDTO = new CollectionAuditFilterDTO();
        filterDTO.setHost("localhost");
        filterDTO.setDeviceType("Router");
        filterDTO.setFileType("Log");
        filterDTO.setFromDate(LocalDate.of(2024, 1, 1));
        filterDTO.setToDate(LocalDate.of(2024, 12, 31));

        CollectionAudit collectionAudit = new CollectionAudit();
        collectionAudit.setUrl("localhost");
        collectionAudit.setDeviceType("Router");
        collectionAudit.setFileType("LogFile");
        collectionAudit.setDateProcessed(LocalDateTime.of(2024, 6, 1, 12, 0));
        collectionAudit.setCollectorId("123");

        Set<String> idSets = new HashSet<>();
        idSets.add("123");

        boolean result = filterService.isRecordExist(filterDTO, collectionAudit, idSets);
        assertFalse(result);
    }

    @Test
    public void testIsRecordExistHostMismatch() {
        CollectionAuditFilterDTO filterDTO = new CollectionAuditFilterDTO();
        filterDTO.setHost("remotehost");
        filterDTO.setDeviceType("Router");
        filterDTO.setFileType("Log");
        filterDTO.setFromDate(LocalDate.of(2024, 1, 1));
        filterDTO.setToDate(LocalDate.of(2024, 12, 31));

        CollectionAudit collectionAudit = new CollectionAudit();
        collectionAudit.setUrl("localhost");
        collectionAudit.setDeviceType("Router");
        collectionAudit.setFileType("LogFile");
        collectionAudit.setDateProcessed(LocalDateTime.of(2024, 6, 1, 12, 0));
        collectionAudit.setCollectorId("123");

        Set<String> idSets = new HashSet<>();
        idSets.add("124");

        boolean result = filterService.isRecordExist(filterDTO, collectionAudit, idSets);
        assertFalse(result);
    }
}




import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

public class FilterServiceTest {

    private FilterService filterService;

    @BeforeEach
    public void setUp() {
        filterService = new FilterService();
    }

    @Test
    public void testIsRecordExistAllCriteriaMatch() {
        CollectionAuditFilterDTO filterDTO = new CollectionAuditFilterDTO();
        filterDTO.setHost("localhost");
        filterDTO.setDeviceType("Router");
        filterDTO.setFileType("Log");
        filterDTO.setFromDate("2024-06-09"); // Set as String
        filterDTO.setToDate("2024-12-31"); // Set as String

        CollectionAudit collectionAudit = new CollectionAudit();
        collectionAudit.setUrl("localhost");
        collectionAudit.setDeviceType("Router");
        collectionAudit.setFileType("Log");
        collectionAudit.setDateProcessed("2024-05-13T08:10:26.033"); // Set as String
        collectionAudit.setCollectorId("123");

        Set<String> idSets = new HashSet<>();
        idSets.add("123");

        boolean result = filterService.isRecordExist(filterDTO, collectionAudit, idSets);
        assertTrue(result);
    }

    @Test
    public void testIsRecordExistDateOutOfRange() {
        CollectionAuditFilterDTO filterDTO = new CollectionAuditFilterDTO();
        filterDTO.setHost("localhost");
        filterDTO.setDeviceType("Router");
        filterDTO.setFileType("Log");
        filterDTO.setFromDate("2024-06-09"); // Set as String
        filterDTO.setToDate("2024-12-31"); // Set as String

        CollectionAudit collectionAudit = new CollectionAudit();
        collectionAudit.setUrl("localhost");
        collectionAudit.setDeviceType("Router");
        collectionAudit.setFileType("Log");
        collectionAudit.setDateProcessed("2025-01-01T08:10:26.033"); // Set as String
        collectionAudit.setCollectorId("123");

        Set<String> idSets = new HashSet<>();
        idSets.add("123");

        boolean result = filterService.isRecordExist(filterDTO, collectionAudit, idSets);
        assertFalse(result);
    }

    @Test
    public void testIsRecordExistFileTypeMismatch() {
        CollectionAuditFilterDTO filterDTO = new CollectionAuditFilterDTO();
        filterDTO.setHost("localhost");
        filterDTO.setDeviceType("Router");
        filterDTO.setFileType("Log");
        filterDTO.setFromDate("2024-06-09"); // Set as String
        filterDTO.setToDate("2024-12-31"); // Set as String

        CollectionAudit collectionAudit = new CollectionAudit();
        collectionAudit.setUrl("localhost");
        collectionAudit.setDeviceType("Router");
        collectionAudit.setFileType("Error");
        collectionAudit.setDateProcessed("2024-05-13T08:10:26.033"); // Set as String
        collectionAudit.setCollectorId("123");

        Set<String> idSets = new HashSet<>();
        idSets.add("123");

        boolean result = filterService.isRecordExist(filterDTO, collectionAudit, idSets);
        assertFalse(result);
    }

    @Test
    public void testIsRecordExistDeviceTypeNotInIdSet() {
        CollectionAuditFilterDTO filterDTO = new CollectionAuditFilterDTO();
        filterDTO.setHost("localhost");
        filterDTO.setDeviceType("Router");
        filterDTO.setFileType("Log");
        filterDTO.setFromDate("2024-06-09"); // Set as String
        filterDTO.setToDate("2024-12-31"); // Set as String

        CollectionAudit collectionAudit = new CollectionAudit();
        collectionAudit.setUrl("localhost");
        collectionAudit.setDeviceType("Switch"); // Not in idSets
        collectionAudit.setFileType("Log");
        collectionAudit.setDateProcessed("2024-05-13T08:10:26.033"); // Set as String
        collectionAudit.setCollectorId("123");

        Set<String> idSets = new HashSet<>();
        idSets.add("456");

        boolean result = filterService.isRecordExist(filterDTO, collectionAudit, idSets);
        assertFalse(result);
    }

    @Test
    public void testIsRecordExistHostMismatch() {
        CollectionAuditFilterDTO filterDTO = new CollectionAuditFilterDTO();
        filterDTO.setHost("localhost");
        filterDTO.setDeviceType("Router");
        filterDTO.setFileType("Log");
        filterDTO.setFromDate("2024-06-09"); // Set as String
        filterDTO.setToDate("2024-12-31"); // Set as String

        CollectionAudit collectionAudit = new CollectionAudit();
        collectionAudit.setUrl("example.com"); // Mismatch
        collectionAudit.setDeviceType("Router");
        collectionAudit.setFileType("Log");
        collectionAudit.setDateProcessed("2024-05-13T08:10:26.033"); // Set as String
        collectionAudit.setCollectorId("123");

        Set<String> idSets = new HashSet<>();
        idSets.add("123");

        boolean result = filterService.isRecordExist(filterDTO, collectionAudit, idSets);
        assertFalse(result);
    }
}



import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class FilterService {

    public void validateFilter(CollectionAuditFilterDTO filterDTO) throws InvalidFilterException {
        boolean isHostPresent = filterDTO.getHost() != null && !filterDTO.getHost().isEmpty();
        boolean isDeviceTypePresent = filterDTO.getDeviceType() != null && !filterDTO.getDeviceType().isEmpty();
        boolean isFileTypePresent = filterDTO.getFileType() != null && !filterDTO.getFileType().isEmpty();

        if (!isHostPresent && !isDeviceTypePresent && !isFileTypePresent) {
            throw new InvalidFilterException("At least one of host, deviceType, or fileType must be provided.");
        }

        if (filterDTO.getFromDate() == null || filterDTO.getToDate() == null) {
            throw new InvalidFilterException("Both fromDate and toDate must be provided.");
        }

        // Parse fromDate and toDate strings into LocalDate objects
        LocalDate parsedFromDate = LocalDate.parse(filterDTO.getFromDate(), DateTimeFormatter.ISO_DATE);
        LocalDate parsedToDate = LocalDate.parse(filterDTO.getToDate(), DateTimeFormatter.ISO_DATE);

        if (parsedFromDate.isAfter(parsedToDate)) {
            throw new InvalidFilterException("fromDate must be before or equal to toDate.");
        }
    }
}