public class JsonStringBuilder {

    public static String createJsonString(String gteValue, String lteValue) {
        String jsonString = String.format(
            "(\"query\" (\"bool\" (\"must\" [{\"range\" [\"createdAt\" (\"gte\" \"%s\",\"lte\" \"%s\")}]}}}}}",
            gteValue, lteValue
        );
        return jsonString;
    }

    public static void main(String[] args) {
        String gteValue = "2014-01-30T00:00:00.101";
        String lteValue = "2014-01-30T00:00:00.103";
        String jsonString = createJsonString(gteValue, lteValue);
        System.out.println(jsonString);
    }
}


public class DateRangeQueryBuilder {

    public static String createDateRangeQuery(String gte, String lte) {
        // Define the JSON template with placeholders for gte and lte
        String jsonTemplate = "{"
                + "\"query\" : {"
                + "  \"bool\" : {"
                + "    \"must\" : [ {"
                + "      \"range\" : {"
                + "        \"createdAt\" : {"
                + "          \"gte\" : \"%s\","
                + "          \"lte\" : \"%s\""
                + "        }"
                + "      }"
                + "    } ]"
                + "  }"
                + "}"
                + "}";

        // Validate the date format
        try {
            DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS");
            LocalDateTime.parse(gte, dateTimeFormatter);
            LocalDateTime.parse(lte, dateTimeFormatter);
        } catch (DateTimeParseException e) {
            System.out.println("Invalid date format: " + e.getMessage());
            return "{}"; // Return an empty JSON object in case of an error
        }

        // Use String.format to replace placeholders with actual values
        return String.format(jsonTemplate, gte, lte);
    }

    public static void main(String[] args) {
        String gte = "2014-01-30T00:00:00.101";
        String lte = "2014-01-30T00:00:00.103";
        String query = createDateRangeQuery(gte, lte);
        System.out.println(query);
    }
}




public class JsonTemplateDTO {
    private String gteValue;
    private String lteValue;
    private Integer from;
    private Integer size;

    // Getters and Setters

    public String getGteValue() {
        return gteValue;
    }

    public void setGteValue(String gteValue) {
        this.gteValue = gteValue;
    }

    public String getLteValue() {
        return lteValue;
    }

    public void setLteValue(String lteValue) {
        this.lteValue = lteValue;
    }

    public Integer getFrom() {
        return from;
    }

    public void setFrom(Integer from) {
        this.from = from;
    }

    public Integer getSize() {
        return size;
    }

    public void setSize(Integer size) {
        this.size = size;
    }

    public String buildJson() {
        StringBuilder jsonTemplateBuilder = new StringBuilder();
        jsonTemplateBuilder.append("{")
            .append("\"query\": {")
            .append("\"bool\": {")
            .append("\"must\": [")
            .append("{")
            .append("\"range\": {")
            .append("\"dateProcessed\": {")
            .append("\"gte\": \"").append(gteValue).append("\",")
            .append("\"lte\": \"").append(lteValue).append("\"")
            .append("}")
            .append("}")
            .append("]")
            .append("}")
            .append("}");

        // Adding from and size if they are not null
        if (from != null || size != null) {
            jsonTemplateBuilder.append(",");
            if (from != null) {
                jsonTemplateBuilder.append("\"from\": ").append(from);
            }
            if (size != null) {
                if (from != null) {
                    jsonTemplateBuilder.append(", ");
                }
                jsonTemplateBuilder.append("\"size\": ").append(size);
            }
        }

        jsonTemplateBuilder.append("}");
        return jsonTemplateBuilder.toString();
    }
}





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class YourClass {
    private static final Logger logger = LoggerFactory.getLogger(YourClass.class);

    public CollectionAuditSummaryDTO getSummary(CollectionAuditFilterDTO collectionAuditFilterDTO) {
        logger.info("collectionAuditFilterDTO: " + collectionAuditFilterDTO);

        String gteValue = DateTimeUtility.convertDateToISO(collectionAuditFilterDTO.getGteDate());
        String lteValue = DateTimeUtility.convertDateToISO(collectionAuditFilterDTO.getLteDate());

        PaginationDto paginationDto = collectionAuditFilterDTO.getPaginationDto();
        Integer paginationFrom = paginationDto != null ? paginationDto.getFrom() : null;
        Integer paginationSize = paginationDto != null ? paginationDto.getSize() : null;

        JsonTemplateDTO jsonTemplateDTO = new JsonTemplateDTO();
        jsonTemplateDTO.setGteValue(gteValue);
        jsonTemplateDTO.setLteValue(lteValue);
        if (paginationDto != null) {
            jsonTemplateDTO.setFromKey(paginationFrom);
            jsonTemplateDTO.setSize(paginationSize);
        }

        String collectionAuditGetAllQuery = jsonTemplateDTO.buildJson();
        logger.info("collectionAuditGetAllQuery: " + collectionAuditGetAllQuery);

        // Your logic to execute the query and return the results
        // For example:
        // return executeQuery(collectionAuditGetAllQuery);

        return new CollectionAuditSummaryDTO();  // Placeholder return statement
    }
}