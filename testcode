




import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;

import java.io.IOException;
import java.util.Iterator;

public class EcpdidDeserializer extends JsonDeserializer<String> {
    @Override
    public String deserialize(JsonParser jsonParser, DeserializationContext context) throws IOException {
        JsonNode root = jsonParser.getCodec().readTree(jsonParser);
        return findEcpdid(root);
    }

    private String findEcpdid(JsonNode node) {
        // Check if the current node has "ecpdid" or "ECPDID"
        if (node.has("ecpdid")) {
            return node.get("ecpdid").asText();
        } else if (node.has("ECPDID")) {
            return node.get("ECPDID").asText();
        }

        // Iterate through child nodes to find "ecpdid" or "ECPDID"
        Iterator<JsonNode> elements = node.elements();
        while (elements.hasNext()) {
            JsonNode child = elements.next();
            String ecpdid = findEcpdid(child); // Recursively search child nodes
            if (ecpdid != null) {
                return ecpdid;
            }
        }

        // If not found, return null
        return null;
    }
}

























import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;

import java.io.IOException;

public class CaseInsensitiveValueDeserializer extends JsonDeserializer<String> {
    @Override
    public String deserialize(JsonParser jsonParser, DeserializationContext context) throws IOException {
        JsonNode node = jsonParser.getCodec().readTree(jsonParser);
        return node.asText();  // Handles the deserialization
    }
}


import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

public class MyClass {
    private String ecpdid;

    @JsonProperty("ecpdid")
    @JsonDeserialize(using = CaseInsensitiveValueDeserializer.class)
    public String getEcpdid() {
        return ecpdid;
    }

    public void setEcpdid(String ecpdid) {
        this.ecpdid = ecpdid;
    }
}
