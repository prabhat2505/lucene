import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class LuceneDateRangeQueryBuilder {

    public static void main(String[] args) {
        String startDate = "2014-01-30T00:00:00.101";
        long startMillis = parseDateToMillis(startDate);
        System.out.println("Start Millis: " + startMillis);

        String endDate = "2014-01-30T00:00:00.103";
        long endMillis = parseDateToMillis(endDate);
        System.out.println("End Millis: " + endMillis);
    }

    public static long parseDateToMillis(String dateString) {
        // Assuming the date format is "yyyy-MM-dd'T'HH:mm:ss.SSS"
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

        try {
            Date date = sdf.parse(dateString);
            return date.getTime();
        } catch (ParseException e) {
            e.printStackTrace();
            // Handle parsing exception, return default or throw a custom exception
            return 0;
        }
    }
}



import org.apache.lucene.index.Term;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.NumericRangeQuery;

public class LuceneDateRangeQueryBuilder {

    public Query buildDateRangeQuery(String fieldName, String startDate, String endDate) {
        // Parse the date strings to long values
        long startMillis = parseDateToMillis(startDate);
        long endMillis = parseDateToMillis(endDate);

        // Create a NumericRangeQuery for the specified date range
        return NumericRangeQuery.newLongRange(fieldName, startMillis, endMillis, true, true);
    }

    private long parseDateToMillis(String dateString) {
        // Assuming the date format is "yyyy-MM-dd'T'HH:mm:ss.SSS"
        // Parse the date string to a long value (milliseconds since epoch)
        // Add error handling as needed
        // ...

        return /* parsed long value */;
    }
}

        Query startQuery = LongPoint.newRangeQuery(fieldName, startMillis, Long.MAX_VALUE);
        booleanQueryBuilder.add(new BooleanClause(startQuery, BooleanClause.Occur.MUST));

        // Clause for the end date
        Query endQuery = LongPoint.newRangeQuery(fieldName, Long.MIN_VALUE, endMillis);
        booleanQueryBuilder.add(new BooleanClause(endQuery, BooleanClause.Occur.MUST));
