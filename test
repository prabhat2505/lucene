import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.util.Iterator;
import java.util.Map;
import java.util.TreeMap;

public class CsvToJsonWithSortedKeys {
    public static void main(String[] args) throws IOException {
        String csvData = "2.02402E+11,2.02402E+11,ROW1M1,0-10,2,2,3,17,17,17,70,2,17";

        // Convert CSV to JSON with sorted keys
        String jsonResult = convertCsvToJson(csvData);

        // Display the result
        System.out.println(jsonResult);
    }

    private static String convertCsvToJson(String csvData) throws IOException {
        String[] values = csvData.split(",");
        ObjectMapper objectMapper = new ObjectMapper();

        // Create a TreeMap to store keys in sorted order
        TreeMap<Integer, Object> sortedMap = new TreeMap<>();
        for (int i = 0; i < values.length; i++) {
            sortedMap.put(i, values[i].trim());
        }

        // Create a new JsonNode with sorted keys
        com.fasterxml.jackson.databind.node.ObjectNode sortedObjectNode = objectMapper.createObjectNode();
        sortedMap.forEach((key, value) -> sortedObjectNode.put(String.valueOf(key), (String) value));

        // Convert JsonNode to JSON string
        return sortedObjectNode.toString();
    }
}






import org.json.JSONArray;
import org.json.JSONObject;

public class JsonTransformer {

    public static JSONObject transformToLucene(JSONObject inputJson) {
        // Create a "must" array for query conditions
        JSONArray mustClauses = new JSONArray();

        // Iterate through input key-value pairs to build the "must" clauses
        for (String key : inputJson.keySet()) {
            JSONObject term = new JSONObject();
            term.put(key, inputJson.get(key));

            JSONObject termWrapper = new JSONObject();
            termWrapper.put("term", term);

            mustClauses.put(termWrapper);
        }

        // Build the final JSON object with "bool" and "sort" elements
        JSONObject query = new JSONObject();
        JSONObject bool = new JSONObject();
        bool.put("must", mustClauses);

        query.put("bool", bool);

        // Add sorting condition
        JSONArray sort = new JSONArray();
        JSONObject sortField = new JSONObject();
        sortField.put("createdAt", "desc");
        sort.put(sortField);

        JSONObject result = new JSONObject();
        result.put("query", query);
        result.put("sort", sort);

        return result;
    }

    public static void main(String[] args) {
        // Example input JSON
        JSONObject inputJson = new JSONObject();
        inputJson.put("enabled", true);
        inputJson.put("type", "xml");

        // Transform input data into Lucene-like JSON
        JSONObject transformedJson = transformToLucene(inputJson);





@Test
public void testSearchSpaceCollector() throws JSONException {
    SpaceCollectorLuceneRepository mockRepository = Mockito.mock(SpaceCollectorLuceneRepository.class);
    SpaceCollectorService spaceCollectorService = new SpaceCollectorService(mockRepository);

    String searchString = "{\"id\":\"1\",\"enabled\":\"true\"}";
    String transformedSearchString = "{\"bool\":{\"must\":[{\"term\":{\"id\":\"1\"}}, {\"term\":{\"enabled\":true}}]}}";

    List<SpaceCollector> spaceCollectorList = new ArrayList<>();
    SpaceCollector spaceCollector = new SpaceCollector();
    spaceCollector.setId("1");
    spaceCollector.setEnabled(true);
    spaceCollectorList.add(spaceCollector);

    given(mockRepository.findByQuery(transformedSearchString))
        .willReturn(spaceCollectorList);

    List<SpaceCollector> result = spaceCollectorService.search(searchString);

    assertNotNull(result);
    assertEquals(1, result.size());
    assertEquals(spaceCollector, result.get(0));
}


        // Output the transformed JSON
        System.out.println(transformedJson.toString(2)); // Pretty-print with an indent of 2 spaces
    }
}



import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import org.apache.lucene.search.Query;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.any;
import static org.junit.jupiter.api.Assertions.*;

import java.util.List;
import java.util.ArrayList;

// Import your repository and related classes
import com.example.repository.SpaceCollectorLuceneRepository;
import com.example.model.SpaceCollector;

@ExtendWith(MockitoExtension.class)
public class SpaceCollectorLuceneRepositoryTest {

    @Mock
    private LuceneSearchService mockLuceneService; // Assume your repository uses a service to interact with Lucene

    @InjectMocks
    private SpaceCollectorLuceneRepository spaceCollectorLuceneRepository;

    @BeforeEach
    public void setUp() {
        // Initialize any setup logic or test-specific configurations if needed
    }

    @Test
    public void testFindByQuery() {
        // Create a mock query (specific to Lucene)
        Query query = ...; // Prepare a Lucene query appropriate for your test case

        // Prepare mock results
        List<SpaceCollector> expectedResults = new ArrayList<>();
        SpaceCollector spaceCollector = new SpaceCollector();
        spaceCollector.setId("1");
        expectedResults.add(spaceCollector);

        // Mock the Lucene search to return the expected results when given the query
        given(mockLuceneService.search(any(Query.class))).willReturn(expectedResults);

        // Call the method in the repository to test
        List<SpaceCollector> actualResults = spaceCollectorLuceneRepository.findByQuery(query);

        // Verify the results are as expected
        assertNotNull(actualResults);
        assertEquals(expectedResults.size(), actualResults.size());
        assertEquals(expectedResults.get(0).getId(), actualResults.get(0).getId());
    }

    @Test
    public void testSaveSpaceCollector() {
        SpaceCollector spaceCollector = new SpaceCollector();
        spaceCollector.setId("1");

        // Assume a successful save returns the same object with some Lucene-related metadata
        given(mockLuceneService.save(spaceCollector)).willReturn(spaceCollector);

        SpaceCollector savedSpaceCollector = spaceCollectorLuceneRepository.save(spaceCollector);

        assertNotNull(savedSpaceCollector);
        assertEquals("1", savedSpaceCollector.getId());
    }
}

