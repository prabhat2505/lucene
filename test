import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.util.Iterator;
import java.util.Map;
import java.util.TreeMap;

public class CsvToJsonWithSortedKeys {
    public static void main(String[] args) throws IOException {
        String csvData = "2.02402E+11,2.02402E+11,ROW1M1,0-10,2,2,3,17,17,17,70,2,17";

        // Convert CSV to JSON with sorted keys
        String jsonResult = convertCsvToJson(csvData);

        // Display the result
        System.out.println(jsonResult);
    }

    private static String convertCsvToJson(String csvData) throws IOException {
        String[] values = csvData.split(",");
        ObjectMapper objectMapper = new ObjectMapper();

        // Create a TreeMap to store keys in sorted order
        TreeMap<Integer, Object> sortedMap = new TreeMap<>();
        for (int i = 0; i < values.length; i++) {
            sortedMap.put(i, values[i].trim());
        }

        // Create a new JsonNode with sorted keys
        com.fasterxml.jackson.databind.node.ObjectNode sortedObjectNode = objectMapper.createObjectNode();
        sortedMap.forEach((key, value) -> sortedObjectNode.put(String.valueOf(key), (String) value));

        // Convert JsonNode to JSON string
        return sortedObjectNode.toString();
    }
}






import org.json.JSONArray;
import org.json.JSONObject;

public class JsonTransformer {

    public static JSONObject transformToLucene(JSONObject inputJson) {
        // Create a "must" array for query conditions
        JSONArray mustClauses = new JSONArray();

        // Iterate through input key-value pairs to build the "must" clauses
        for (String key : inputJson.keySet()) {
            JSONObject term = new JSONObject();
            term.put(key, inputJson.get(key));

            JSONObject termWrapper = new JSONObject();
            termWrapper.put("term", term);

            mustClauses.put(termWrapper);
        }

        // Build the final JSON object with "bool" and "sort" elements
        JSONObject query = new JSONObject();
        JSONObject bool = new JSONObject();
        bool.put("must", mustClauses);

        query.put("bool", bool);

        // Add sorting condition
        JSONArray sort = new JSONArray();
        JSONObject sortField = new JSONObject();
        sortField.put("createdAt", "desc");
        sort.put(sortField);

        JSONObject result = new JSONObject();
        result.put("query", query);
        result.put("sort", sort);

        return result;
    }

    public static void main(String[] args) {
        // Example input JSON
        JSONObject inputJson = new JSONObject();
        inputJson.put("enabled", true);
        inputJson.put("type", "xml");

        // Transform input data into Lucene-like JSON
        JSONObject transformedJson = transformToLucene(inputJson);

        // Output the transformed JSON
        System.out.println(transformedJson.toString(2)); // Pretty-print with an indent of 2 spaces
    }
}
